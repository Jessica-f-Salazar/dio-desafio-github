 📝 Git e GitHub
Versionamento de código - Sistemas de controle de versão (VCS) - Controlam as versões de um arquivo ao longo do tempo (histórico, datas, autor etc.)

VCS - Centralizado - Servidor Central - Não é possível utilizar caso fique fora do ar.
Exemplos: CVS / Subversion 

VCS - Distribuído - Servidor - Cada repositório é duplicado localmente - Possível utilizar mesmo que esteja fora do ar - Clona o repositório completo, que inclui o histórico de versões. - Cada clone é uma espécie de backup. 
Exemplos: Git / Mercurial 

Quando falamos de repositório local = Git | Repositório remoto = GitHub.

GIT 
Comandos: 
git clone - clona um repositório existente para um novo diretório (pasta) local. 
git commit - grava alterações no repositório 
git pull - “puxa” as alterações do repositório remoto para o local (busca e mescla)
git config - configurações 
git init - inicia um novo repositório 

• Criação de um novo diretório:
mkdir (make directory)( padrão do terminal) > mkdir “nome da pasta” > cd nome da pasta>git init >git status > touch “nome do arquivo.md/txt”>git status> git add “nome do arquivo” > git status > git commit -m” nome pro commit”

• Clonar um repositório com outro nome:  git clone URL nome-do-diretorio-local

git remote add origin URL - ligar o repositório local ao repositório remoto 
git remote -v - exibir o endereço do repositório remoto
git status - mostra a árvore de preparação 

gitignore - Especifica arquivos intencionalmente não rastreados para serem ignorados (que não serão salvos ou apareçam) 
.gitkeep é um arquivo oculto pelo sistema que serve apenas para versionar pastas vazias
git restore - descarta todas as alterações feitas localmente 
git amend - alterar a mensagem do último commit (git commit –amend -m”nova mensagem”)
git reset - soft/mixed/hard
git push - envia as alterações do repositório local para o remoto -> git push origin main
git pull - atualizar localmente as alterações que foram feitas no github 

git fetch - busca alterações mas não aplica a branch atual
git diff - informações detalhadas sobre o arquivo 

• Branches •
A branch main sempre irá apontar pro último commit criado;
• Criar nova commit > echo "commit-2-branch-main" > commit-2-branch-main.txt > git add . > git commit -m”nome” > 
git merge - mesclar a branch teste com a branch main 
git branch - lista das branchs atuais 
git branch -d teste - exclui a branch de teste 
git checkout -b nova-branch - trocar de branch e criar uma nova 
git branch -d nome-da-branch - deletar uma branch
git branch -v - ver o último commit de cada branch 

•Alterações do remoto para o local:  merge origin/main - baixar conteúdo da branch remota sem mesclar com a branch local; 
•Clonar um repositório com várias branches, porém clonando somente uma: 
git clone URL  --branch  nome-da-branch --single-branch
•Stash: branch temporário, contém apenas alterações que não foram commitadas
git stash - arquivar alterações temporariamente 
git stash pop - remover e aplicar o elemento do topo
git stash apply - aplicar alterações sem deletar a referência (feita no comando pop) 

Iniciando um repositório:
criar um arquivo README.md > editar (vs code) > comando git add > git status > git commit -m “commit inicial” > git log para visualizar 
informações do arquivo 

* É importante ler sobre convenções para nomes de branches e mensagens dos commits.

📁 Documentação oficial do Git: https://git-scm.com/docs

